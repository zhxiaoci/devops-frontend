{"version":3,"file":"static/js/6604.1f32107c.js","mappings":"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","sources":["components/WorkItems/WorkItemsList.tsx","services/github.ts","types/workItem.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { Table, Tag, Button, Space, Card, Avatar, Modal, Form, Input, Select, message } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { githubService } from '../../services/github';\nimport { User } from '../../types/user';\nimport { WorkItem, WorkItemStatus, WorkItemStatusMap } from '../../types/workItem';\n\ninterface AssigneeWithUser {\n  user: User;\n}\n\nconst WorkItemsList: React.FC = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [form] = Form.useForm();\n  const queryClient = useQueryClient();\n\n  const { data: workItems, isLoading } = useQuery(\n    ['workItems'],\n    () => githubService.getWorkItems(),\n  );\n\n  const createWorkItemMutation = useMutation(\n    (data: { title: string; description: string; assigneeIds: string[] }) =>\n      githubService.createWorkItem(data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['workItems']);\n        setIsModalVisible(false);\n        form.resetFields();\n        message.success('工作项创建成功');\n      },\n      onError: () => {\n        message.error('创建失败');\n      },\n    }\n  );\n\n  const handleCreateWorkItem = (values: any) => {\n    createWorkItemMutation.mutate(values);\n  };\n\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 80,\n    },\n    {\n      title: '标题',\n      dataIndex: 'title',\n      key: 'title',\n      width: '30%',\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: WorkItemStatus) => {\n        const { color, text } = WorkItemStatusMap[status];\n        return <Tag color={color}>{text}</Tag>;\n      },\n    },\n    {\n      title: '负责人',\n      dataIndex: 'assignees',\n      key: 'assignees',\n      width: 200,\n      render: (assignees: AssigneeWithUser[]) => (\n        <Avatar.Group maxCount={3}>\n          {assignees?.map(assignee => (\n            <Avatar\n              key={assignee.user?.id}\n              src={assignee.user?.avatarUrl}\n              alt={assignee.user?.name || assignee.user?.login}\n            />\n          ))}\n        </Avatar.Group>\n      ),\n    },\n    {\n      title: '创建人',\n      dataIndex: 'createdBy',\n      key: 'createdBy',\n      width: 150,\n      render: (user: User) => (\n        <Space>\n          <Avatar src={user?.avatarUrl} size=\"small\" />\n          {user?.name || user?.login}\n        </Space>\n      ),\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 150,\n      render: (date: string) => new Date(date).toLocaleString(),\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: (_: any, record: any) => (\n        <Space size=\"middle\">\n          <Button type=\"link\" size=\"small\">编辑</Button>\n          <Button type=\"link\" size=\"small\" danger>删除</Button>\n        </Space>\n      ),\n    },\n  ];\n\n  const { data: members, isLoading: membersLoading } = useQuery(\n    'orgMembers',\n    () => githubService.getOrganizationMembers(),\n  );\n\n  return (\n    <div className=\"card-container\">\n      <div className=\"page-header\">\n        <h2 className=\"page-title\">工作项列表</h2>\n        <Button \n          type=\"primary\" \n          icon={<PlusOutlined />} \n          size=\"large\"\n          onClick={() => setIsModalVisible(true)}\n        >\n          新建工作项\n        </Button>\n      </div>\n      <Table\n        columns={columns}\n        dataSource={workItems}\n        loading={isLoading}\n        rowKey=\"id\"\n        pagination={{\n          pageSize: 10,\n          showSizeChanger: true,\n          showQuickJumper: true,\n        }}\n        bordered={false}\n        rowClassName={() => 'table-row'}\n      />\n\n      <Modal\n        title=\"新建工作项\"\n        visible={isModalVisible}\n        onCancel={() => {\n          setIsModalVisible(false);\n          form.resetFields();\n        }}\n        footer={null}\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={handleCreateWorkItem}\n        >\n          <Form.Item\n            name=\"title\"\n            label=\"标题\"\n            rules={[{ required: true, message: '请输入标题' }]}\n          >\n            <Input placeholder=\"请输入工作项标题\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"description\"\n            label=\"描述\"\n          >\n            <Input.TextArea rows={4} placeholder=\"请输入工作项描述\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"assigneeIds\"\n            label=\"负责人\"\n            rules={[{ required: true, message: '请选择负责人' }]}\n          >\n            <Select\n              mode=\"multiple\"\n              placeholder=\"请选择负责人\"\n              optionFilterProp=\"children\"\n              loading={membersLoading}\n            >\n              {members?.map((member: { id: string; avatarUrl: string; name?: string; login: string }) => (\n                <Select.Option key={member?.id} value={member?.id}>\n                  <Space>\n                    <Avatar size=\"small\" src={member?.avatarUrl} />\n                    {member.name || member.login}\n                  </Space>\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item>\n            <Space>\n              <Button \n                type=\"primary\" \n                htmlType=\"submit\" \n                loading={createWorkItemMutation.isLoading}\n              >\n                创建\n              </Button>\n              <Button onClick={() => {\n                setIsModalVisible(false);\n                form.resetFields();\n              }}>\n                取消\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default WorkItemsList; ","import { Repository } from '../types/repository';\nimport { Change, WorkItem, WorkItemStatus } from '../types/workItem';\nimport apiClient from './axios';\n\nexport const githubService = {\n  getRepositories: async () => {\n    const response = await apiClient.get('/github/repos');\n    return response.data;\n  },\n\n  getBranches: async (githubId: number | string) => {\n    const response = await apiClient.get(`/github/repos/${githubId}/branches`);\n    return response.data;\n  },\n\n  getRepository: async (githubId: number | string): Promise<Repository> => {\n    const response = await apiClient.get(`/github/repos/${githubId}`);\n    return response.data;\n  },\n\n  createWorkItem: async (data: {\n    title: string;\n    description: string;\n    assigneeIds: string[];\n  }) => {\n    const response = await apiClient.post('/github/work-items/create', data);\n    return response.data;\n  },\n\n  updateWorkItem: async (workItemId: string, data: Partial<WorkItem>) => {\n    const response = await apiClient.put(\n      `/github/work-items/${workItemId}`,\n      data\n    );\n    return response.data;\n  },\n\n  deleteWorkItem: async (workItemId: string) => {\n    await apiClient.delete(`/github/work-items/${workItemId}`);\n  },\n\n  getWorkItems: async () => {\n    const response = await apiClient.get('/github/work-items');\n    return response.data;\n  },\n\n  getChangeList: async (repoId: number | string) => {\n    const response = await apiClient.get(`/github/repos/${repoId}/changes`);\n    return response.data;\n  },\n\n  createChange: async (githubId: number | string, data: {\n    title: string;\n    description: string;\n    branchName: string;\n    isNewBranch: boolean;\n    workItemId?: number;\n  }) => {\n    const response = await apiClient.post(`/github/repos/${githubId}/changes`, data);\n    return response.data;\n  },\n\n  deployChange: async (githubId: number | string, changeId: string, environment: string) => {\n    const response = await apiClient.post(\n      `/github/repos/${githubId}/changes/${changeId}/deploy`,\n      { environment }\n    );\n    return response.data;\n  },\n\n  editChange: async (githubId: number | string, changeId: string, data: Partial<Change>) => {\n    const response = await apiClient.put(\n      `/github/repos/${githubId}/changes/${changeId}`,\n      data\n    );\n    return response.data;\n  },\n\n  deleteChange: async (githubId: number | string, changeId: number | string, deleteRemoteBranch: boolean = false) => {\n    await apiClient.delete(\n      `/github/repos/${githubId}/changes/${changeId}`,\n      { data: { deleteRemoteBranch } }\n    );\n  },\n\n  getOrganizationMembers: async () => {\n    const response = await apiClient.get('/github/org/members');\n    return response.data;\n  },\n\n  updateChange: async (changeId: string, data: {\n    title?: string;\n    description?: string;\n    workItemId?: number | null;\n    managerId?: number;\n  }) => {\n    const response = await apiClient.put(`/github/changes/${changeId}`, data);\n    return response.data;\n  },\n\n  addChangeToPendingDeploy: async (\n    githubId: number | string,\n    changeId: number | string,\n    environment: string\n  ) => {\n    const response = await apiClient.post(\n      `/github/repos/${githubId}/environments/${environment}/changes/${changeId}`\n    );\n    return response.data;\n  },\n\n  removeChangeFromPendingDeploy: async (\n    githubId: number | string,\n    changeId: number | string,\n    environment: string\n  ) => {\n    const response = await apiClient.delete(\n      `/github/repos/${githubId}/environments/${environment}/changes/${changeId}`\n    );\n    return response.data;\n  },\n\n  getDeployHistory: async (\n    githubId: number | string,\n    environment: string,\n    limit: number = 10\n  ) => {\n    const response = await apiClient.get(\n      `/github/repos/${githubId}/environments/${environment}/history`,\n      { params: { limit } }\n    );\n    return response.data;\n  },\n\n  dispatch: async (data: any) => {\n    const response = await apiClient.post(\n      `/github/dispatch`,\n      { ...data }\n    );\n    return response.data;\n  },\n\n  crateReleaseAndMerge: async (envId: number) => {\n    const response = await apiClient.post(\n      `/github/env/${envId}/merge`\n    );\n    return response.data;\n  }\n}; ","import { User } from './user';\n\nexport enum WorkItemStatus {\n  Open = 'open',\n  InProgress = 'in_progress',\n  Done = 'done',\n}\n\nexport const WorkItemStatusMap = {\n  [WorkItemStatus.Open]: { color: 'blue', text: '待处理' },\n  [WorkItemStatus.InProgress]: { color: 'orange', text: '进行中' },\n  [WorkItemStatus.Done]: { color: 'green', text: '已完成' },\n} as const;\n\nexport interface WorkItem {\n  id: number;\n  title: string;\n  description: string;\n  status: WorkItemStatus;\n  createdAt: string;\n  updatedAt: string;\n  createdBy: {\n    id: number;\n    login: string;\n    name?: string;\n    avatarUrl?: string;\n  };\n  assignees: Array<{\n    user: {\n      id: number;\n      login: string;\n      name?: string;\n      avatarUrl?: string;\n    };\n  }>;\n}\n\nexport interface Change {\n  id: number;\n  title: string;\n  description: string;\n  branchName: string;\n  isNewBranch: boolean;\n  status: string;\n  repoId: number | string;\n  createdAt: string;\n  updatedAt: string;\n  createdBy: {\n    id: number;\n    login: string;\n    name?: string;\n    avatarUrl?: string;\n  };\n  manager: {\n    id: number;\n    login: string;\n    name?: string;\n    avatarUrl?: string;\n  };\n  workItem?: WorkItem;\n  diffStats?: {\n    additions: number;\n    deletions: number;\n  };\n} "],"names":["WorkItemsList","isModalVisible","setIsModalVisible","useState","form","Form","useForm","queryClient","useQueryClient","data","workItems","isLoading","useQuery","githubService","getWorkItems","createWorkItemMutation","useMutation","createWorkItem","onSuccess","invalidateQueries","resetFields","message","success","onError","error","columns","title","dataIndex","key","width","render","status","color","text","WorkItemStatusMap","_jsx","Tag","children","assignees","Avatar","maxCount","map","assignee","_assignee$user","_assignee$user2","_assignee$user3","_assignee$user4","src","user","avatarUrl","alt","name","login","id","_jsxs","Space","size","date","Date","toLocaleString","_","record","Button","type","danger","members","membersLoading","getOrganizationMembers","className","icon","PlusOutlined","onClick","Table","dataSource","loading","rowKey","pagination","pageSize","showSizeChanger","showQuickJumper","bordered","rowClassName","Modal","visible","onCancel","footer","layout","onFinish","values","mutate","Item","label","rules","required","Input","placeholder","TextArea","rows","Select","mode","optionFilterProp","member","Option","value","htmlType","getRepositories","async","apiClient","get","getBranches","githubId","getRepository","post","updateWorkItem","workItemId","put","deleteWorkItem","delete","getChangeList","repoId","createChange","deployChange","changeId","environment","editChange","deleteChange","deleteRemoteBranch","arguments","length","undefined","updateChange","addChangeToPendingDeploy","removeChangeFromPendingDeploy","getDeployHistory","limit","params","dispatch","crateReleaseAndMerge","envId","WorkItemStatus","Open","InProgress","Done"],"sourceRoot":""}